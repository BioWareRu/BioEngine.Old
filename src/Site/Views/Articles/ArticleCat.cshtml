@using BioEngine.Data.Base
@using BioEngine.Routing
@using BioEngine.Site.ViewComponents
@using BioEngine.Site.ViewModels
@model BioEngine.Site.ViewModels.Articles.ArticleCatViewModel
@inject ParentEntityProvider ParentEntityProvider
@{
    Layout = "~/Views/_Main.cshtml";
    var parent = Model.ArticleCat.Parent;
}

<div class="article__block">
    @(await Component.InvokeAsync<BreadcrumbsViewComponent>(Model.BreadCrumbs))
    <article class="article">
        <header class="article__header">
            <div class="article__title-wrap">
                <h2 class="article__title">@Model.ArticleCat.Title</h2>
                @if (!string.IsNullOrEmpty(Model.ArticleCat.Descr)) 
                {
                    <div>@Html.Raw(Model.ArticleCat.Descr)</div>
                }
            </div>
            @await Html.PartialAsync("~/Views/Shared/ParentHeader.cshtml", new ParentHeaderViewModel(parent, x => Url.Articles().ParentArticlesUrl(Model.ArticleCat), x => Url.Base().ParentIconUrl(x)))
        </header>
        @if (string.IsNullOrEmpty(Model.ArticleCat.Content))
        {
            <div class="files">
                @foreach (var child in Model.ArticleCat.Children)
                {
                    <div class="files__cat">
                        <ul class="files__list">
                            <li class="files__item">
                                <h2 class="files__title">
                                    <a class="files__link" href="@Url.Articles().CatPublicUrl(child)">@child.Title</a>
                                </h2>
                                @if (!string.IsNullOrEmpty(child.Descr))
                                {
                                    <div>@Html.Raw(child.Descr)</div>
                                }
                                <ul class="files__list">
                                    @foreach (var article in child.Items)
                                    {
                                        <li class="files__item">
                                            <a class="files__link"
                                               href="@Url.Articles().PublicUrl(article)">
                                                @article.Title
                                            </a><br>
                                            @Html.Raw(article.Announce)
                                        </li>
                                    }
                                </ul>
                            </li>
                        </ul>
                    </div>
                }

            </div>
            <div class="files">
                <ul class="files__list">
                    @foreach (var article in Model.ArticleCat.Items)
                    {
                        <li class="files__item">
                            <a class="files__link" href="@Url.Articles().PublicUrl(article)">@article.Title</a>
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            @Html.Raw(Model.ArticleCat.Content)
        }

    </article>
    @(await Component.InvokeAsync<PagerViewComponent>(new
      {
          pagerModel = new PagerModel(Model.CurrentPage, Model.TotalArticles, page => Url.Articles().CatPublicUrl(Model.ArticleCat, page), 20)
      }))
</div>