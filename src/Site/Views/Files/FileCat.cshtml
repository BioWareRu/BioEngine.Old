@using System.Threading.Tasks
@using BioEngine.Common.Base
@using BioEngine.Routing
@using BioEngine.Site.ViewComponents
@using BioEngine.Site.ViewModels
@model BioEngine.Site.ViewModels.Files.FileCatViewModel
@inject ParentEntityProvider ParentEntityProvider
@{
    Layout = "~/Views/_Main.cshtml";
    var parent = Model.FileCat.Parent;
}

<div class="article__block">
    @(await Component.InvokeAsync<BreadcrumbsViewComponent>(Model.BreadCrumbs))
    <article class="article">
        <header class="article__header">
            <div class="article__title-wrap">
                <h2 class="article__title">@Model.FileCat.Title</h2>
            </div>
            @Html.Partial("~/Views/Shared/ParentHeader.cshtml", new ParentHeaderViewModel(parent, x => Url.Files().ParentFilesUrl(x), x => Url.Base().ParentIconUrl(x)))
        </header>

        @if (Model.FileCat.Children.Any())
        {
            <h3>Подкатегории</h3>
            <div class="files">
                @foreach (var child in Model.FileCat.Children)
                {
                    <div class="files__cat">
                        <ul class="files__list">
                            <li class="files__item">
                                <h2 class="files__title">
                                    <a class="files__link" href="@Url.Files().CatPublicUrl(child)">@child.Title</a>
                                </h2>
                                <ul class="files__list">
                                    @foreach (var file in child.Items)
                                    {
                                        <li class="files__item">
                                            <a class="files__link"
                                               href="@Url.Files().PublicUrl(file)">
                                                @file.Title
                                            </a><br>
                                            @Html.Raw(file.Announce)
                                        </li>
                                    }
                                </ul>
                            </li>
                        </ul>
                    </div>
                }

            </div>
        }
        @if (Model.FileCat.Items.Any())
        {
            <h3>Файлы</h3>
            <div class="files">
                <ul class="files__list">
                    @foreach (var file in Model.FileCat.Items)
                    {
                        <li class="files__item">
                            <a class="files__link" href="@Url.Files().PublicUrl(file)">@Html.Raw(file.Title)</a>
                        </li>
                    }
                </ul>
            </div>
        }
    </article>
    @(await Component.InvokeAsync<PagerViewComponent>(new
      {
          pagerModel = new PagerModel(Model.CurrentPage, Model.TotalFiles, page => Url.Files().CatPublicUrl(Model.FileCat, page), 20)
      }))
</div>